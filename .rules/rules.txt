# Neural-Nexus Package Rules

## Package Development Guidelines

1. **API Design**
   - All APIs must follow RESTful principles
   - Use versioning (e.g., /v1/api/keys)
   - Return consistent JSON response structures
   - Use appropriate HTTP status codes

2. **Code Style**
   - Follow TypeScript best practices
   - Use async/await over promises where possible
   - Implement proper error handling
   - Add JSDoc comments for all public functions
   - Use meaningful variable and function names in camelCase
   - Keep functions small and focused on a single task

3. **Security Rules**
   - Never store raw API keys in database (always hash)
   - Use bcrypt for password/key hashing
   - Implement rate limiting on all endpoints
   - Set proper CORS headers
   - Use HTTPS only in production
   - Validate all inputs
   - Sanitize all outputs
   - Use environment variables for sensitive configuration
   - Implement JWT best practices for authentication

4. **Database Rules**
   - Create indexes for frequently queried fields
   - Use schema validation
   - Implement proper error handling for database operations
   - Use transactions for critical operations
   - Never trust user input for direct database queries
   - Include created_at and updated_at fields on all records

5. **Testing Requirements**
   - Minimum 85% code coverage
   - Unit tests for all core functionality
   - Integration tests for API endpoints
   - Performance tests for critical paths
   - Security tests for authentication and authorization
   - Test for edge cases and error conditions

6. **Documentation Standards**
   - Maintain comprehensive README.md
   - Generate API documentation from JSDoc comments
   - Provide usage examples for common scenarios
   - Include diagrams for complex workflows
   - Document all configuration options
   - Maintain a changelog

7. **Performance Guidelines**
   - Implement caching for expensive operations
   - Use connection pooling for database access
   - Optimize database queries
   - Implement pagination for list endpoints
   - Use streaming for large data sets
   - Set appropriate timeout values

8. **Packaging Rules**
   - Follow semantic versioning
   - Include TypeScript type definitions
   - Minimize dependencies
   - Specify peer dependencies correctly
   - Optimize package size (use .npmignore)
   - Configure proper main, types, and exports in package.json

9. **Extensibility Requirements**
   - Use plugin architecture for extensions
   - Provide hooks for custom logic
   - Support custom database adapters
   - Allow for middleware integration
   - Enable custom authentication strategies

10. **Gen-Z Style Requirements**
    - Use modern JS features (nullish coalescing, optional chaining)
    - Implement a vibe-check feature to validate key usage patterns
    - Create "no cap" verification for secure endpoints
    - Support "low-key" mode for reduced logging
    - Add "sus" detection for unusual API usage patterns
    - Include "lit" analytics dashboard
    - Implement "flex" mode for extended functionality
    - Add "bet" callbacks for successful operations 